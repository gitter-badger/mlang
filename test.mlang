
id(a: type, x: a) = x;

nat = [zero, succ(nat)];


nat2 = [zero, succ([zero, succ(nat)])];

nat3 = [zero, succ([zero, succ(nat3)])];

test00 = assert_equal(type, nat, nat2); // true
test01 = assert_equal(type, nat, nat3); // true

bool = [true, false];

not(a: bool): bool = match a {
  true -> bool:false;
  false -> bool:true;
};

odd(a: nat): bool;


even(a: nat): bool = match a {
  zero -> bool:true;
  succ(a) -> odd(a);
};

odd(a: nat): bool = match a {
  zero -> bool:false;
  succ(a) -> even(a);
};

test0 = assert_equal(bool, even(nat:zero), bool:true); // true
test1 = assert_equal(bool, odd(nat:zero), bool:false); // true

odd_alternative(a: nat): bool;

even_alternative(a: nat): bool = match a {
  zero -> bool:true;
  succ(a) -> odd_alternative(a);
};


odd_alternative(a: nat): bool = match a {
  zero -> bool:false;
  succ(a) -> id(bool, even_alternative(a)); // notice here is a id application, it should pass
};

test3 = assert_equal((nat) => bool, odd, odd_alternative); // true

pred(n: nat): nat = match n {
  zero -> nat:zero;
  succ(m) -> m;
};

pred_to_zero(n: nat): nat = match n {
  zero -> nat:zero;
  succ(m) -> pred_to_zero(m);
};

pred_to_zero(n: nat): assert_return_is() = match n {
  zero -> assert_equal(n, zero);
  succ(m) -> assert_equal(nat:succ(m), n);
};



test_eta = (a: type, f: (a) => a) -> make {
  test = assert_equal((a) => a, f, (x: a) -> f(x));
};

test_lambda_not_equal = (a: type, f: (a) => a, x: a) -> make {
  test = assert_not_equal((a) => a, f, (y: a) -> x);
};


