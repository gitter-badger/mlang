
id(a: type, x: a) = x;

nat = [zero, succ(nat)];


nat2 = [zero, succ([zero, succ(nat)])];

nat3 = [zero, succ([zero, succ(nat3)])];

test00 = print_equal(type, nat, nat2);
test01 = print_equal(type, nat, nat3);

bool = [true, false];

not(a: bool): bool = match a {
  true -> bool:false;
  false -> bool:true;
};

odd(a: nat): bool;


even(a: nat): bool = match a {
  zero -> bool:true;
  succ(a) -> not(not(id((nat) => bool, odd)(a)));
};

odd(a: nat): bool = match a {
  zero -> bool:false;
  succ(a) -> even(a);
};

odd_alternative(a: nat): bool;

even_alternative(a: nat): bool = match a {
  zero -> bool:true;
  succ(a) -> odd_alternative(a);
};


odd_alternative(a: nat): bool = match a {
  zero -> bool:false;
  succ(a) -> not(not(id((nat) => bool, even_alternative)(a)));
};

pred(n: nat): nat = match n {
  zero -> nat:zero;
  succ(m) -> m;
};

pred_to_zero(n: nat): nat = match n {
  zero -> nat:zero;
  succ(m) -> pred_to_zero(m);
};


test0 = print_equal(bool, even(nat:zero), bool:true);
test1 = print_equal(bool, odd(nat:zero), bool:false);
test3 = print_equal((nat) => bool, odd, odd_alternative);
